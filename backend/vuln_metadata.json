[{"name": "SQL Injection", "description": "SQL Injection allows attackers to manipulate SQL queries by injecting malicious input.", "examples": [{"language": "PHP", "context": "Unescaped GET input", "code": "$query = \"SELECT * FROM users WHERE email = '\" . $_GET['email'] . \"'\";"}], "remediations": [{"language": "PHP", "method": "Use parameterized queries", "code": "$stmt = $pdo->prepare('SELECT * FROM users WHERE email = ?');\n$stmt->execute([$_GET['email']]);"}], "patch": "https://owasp.org/www-community/attacks/SQL_Injection"}, {"name": "Cross-Site Scripting (XSS)", "description": "XSS enables attackers to inject scripts into web pages viewed by other users.", "examples": [{"language": "JavaScript", "context": "Injecting HTML into DOM", "code": "document.body.innerHTML = userInput;"}], "remediations": [{"language": "JavaScript", "method": "Escape output or use textContent", "code": "element.textContent = userInput;"}], "patch": "https://owasp.org/www-community/attacks/xss"}, {"name": "Command Injection", "description": "Command Injection occurs when input is passed to a system shell without sanitization.", "examples": [{"language": "Python", "context": "os.system with raw input", "code": "os.system('ping ' + user_input)"}], "remediations": [{"language": "Python", "method": "Use subprocess with list input", "code": "subprocess.run(['ping', user_input])"}], "patch": "https://owasp.org/www-community/attacks/Command_Injection"}, {"name": "Insecure Deserialization", "description": "Leads to remote code execution when untrusted data is deserialized.", "examples": [{"language": "Java", "context": "Deserializing user input", "code": "ObjectInputStream in = new ObjectInputStream(socket.getInputStream());\nObject obj = in.readObject();"}], "remediations": [{"language": "Java", "method": "Validate input classes or use JSON", "code": "// Prefer JSON parsing libraries like Jackson or Gson"}], "patch": "https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data"}, {"name": "Broken Authentication", "description": "Occurs when attackers exploit poor authentication mechanisms.", "examples": [{"language": "Node.js", "context": "Weak password hashing", "code": "const hashed = md5(password);"}], "remediations": [{"language": "Node.js", "method": "Use bcrypt or Argon2", "code": "const bcrypt = require('bcrypt');\nbcrypt.hash(password, 10);"}], "patch": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"}, {"name": "Sensitive Data Exposure", "description": "Occurs when sensitive information is not properly protected.", "examples": [{"language": "Python", "context": "Logging passwords", "code": "print('User password:', password)"}], "remediations": [{"language": "Python", "method": "Avoid logging sensitive data", "code": "# Do not log sensitive credentials"}], "patch": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"}, {"name": "Security Misconfiguration", "description": "Default settings, overly verbose errors, or unpatched systems expose vulnerabilities.", "examples": [{"language": "Apache", "context": "Verbose error pages", "code": "ErrorDocument 404 /error.html"}], "remediations": [{"language": "Apache", "method": "Hide server version info", "code": "ServerSignature Off\nServerTokens Prod"}], "patch": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"}, {"name": "Using Components with Known Vulnerabilities", "description": "Libraries or packages with public vulnerabilities can be exploited.", "examples": [{"language": "JavaScript", "context": "Old jQuery version", "code": "<script src='https://code.jquery.com/jquery-1.7.1.min.js'></script>"}], "remediations": [{"language": "JavaScript", "method": "Use latest versions", "code": "<script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>"}], "patch": "https://owasp.org/www-community/vulnerabilities/Using_components_with_known_vulnerabilities"}, {"name": "Insufficient Logging & Monitoring", "description": "Without proper logs, breaches go undetected.", "examples": [{"language": "Python", "context": "No logging on failed login", "code": "if not is_valid(user):\n    return 'Unauthorized'"}], "remediations": [{"language": "Python", "method": "Log access attempts", "code": "logger.warning('Failed login for user: %s', username)"}], "patch": "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"}, {"name": "Broken Access Control", "description": "Access controls are not properly enforced on functions or endpoints.", "examples": [{"language": "Django", "context": "No permission check on endpoint", "code": "@api_view(['GET'])\ndef user_list(request):\n    return Response(User.objects.all())"}], "remediations": [{"language": "Django", "method": "Use permission classes", "code": "@permission_classes([IsAdminUser])"}], "patch": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"}]