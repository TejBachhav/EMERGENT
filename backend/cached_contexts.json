[
  {
    "query": "üìã OWASP Top 10 vulnerabilities",
    "context": "OWASP Top 10: Web application security risks.\n1. Injection: SQL, OS, LDAP. Sanitize inputs.\n2. Broken Authentication: MFA, strong passwords.\n3. Sensitive Data Exposure: Encryption in transit/rest.\n4. XML External Entities (XXE): Disable external entities.\n5. Broken Access Control: Principle of least privilege.\n6. Security Misconfiguration: Hardening, patching.\n7. Cross-Site Scripting (XSS): Escape outputs, CSP.\n8. Insecure Deserialization: Avoid deserialization.\n9. Using Components with Known Vulnerabilities: Dependency checks.\n10. Insufficient Logging & Monitoring: Detect incidents.\n"
  },
  {
    "query": "SQL-Injection",
    "context": "üõ°Ô∏è **SQL Injection Analysis**\n\n**Description:**\nSQL injection is a code injection technique that might destroy your database. It occurs when user input is not properly sanitized before being included in SQL queries.\n\n**Vulnerable Code Example:**\n```javascript\nSELECT * FROM users WHERE username = '' + username + '' AND password = '' + password + ''\n```\n\n**Secure Implementation:**\n```javascript\nSELECT * FROM users WHERE username = ? AND password = ?\n```\n\n**Security Patch:**\nUse parameterized queries or prepared statements to prevent SQL injection attacks.\n\n**Additional Security Recommendations:**\n‚Ä¢ Always validate and sanitize user input\n‚Ä¢ Implement proper authentication and authorization\n‚Ä¢ Use security headers (CSP, X-Frame-Options, etc.)\n‚Ä¢ Regular security audits and penetration testing\n‚Ä¢ Keep dependencies up to date\n‚Ä¢ Follow OWASP guidelines for secure coding\n\n**Next Steps:**\n‚Ä¢ Review your codebase for similar patterns\n‚Ä¢ Implement automated security testing\n‚Ä¢ Set up continuous security monitoring\n\nWould you like me to analyze specific code or explain other security vulnerabilities?"
  },
  {
    "query": "üö® Common SQL injection patterns",
    "context": "üõ°Ô∏è **SQL Injection Analysis**\n\n**Description:**\nSQL injection is a code injection technique that might destroy your database. It occurs when user input is not properly sanitized before being included in SQL queries.\n\n**Vulnerable Code Example:**\n```javascript\nSELECT * FROM users WHERE username = '' + username + '' AND password = '' + password + ''\n```\n\n**Secure Implementation:**\n```javascript\nSELECT * FROM users WHERE username = ? AND password = ?\n```\n\n**Security Patch:**\nUse parameterized queries or prepared statements to prevent SQL injection attacks.\n\n**Additional Security Recommendations:**\n‚Ä¢ Always validate and sanitize user input\n‚Ä¢ Implement proper authentication and authorization\n‚Ä¢ Use security headers (CSP, X-Frame-Options, etc.)\n‚Ä¢ Regular security audits and penetration testing\n‚Ä¢ Keep dependencies up to date\n‚Ä¢ Follow OWASP guidelines for secure coding\n\n**Next Steps:**\n‚Ä¢ Review your codebase for similar patterns\n‚Ä¢ Implement automated security testing\n‚Ä¢ Set up continuous security monitoring\n\nWould you like me to analyze specific code or explain other security vulnerabilities?"
  },
  {
    "query": "üîí Secure authentication best practices",
    "context": "üîí **CyberGuard AI Response**\n\nSecure Authentication Best Practices:\r\n\r\n1. Use Strong Passwords: Always use strong passwords that include uppercase letters, lowercase letters, numbers, and special characters. Avoid using common words or phrases as your password.\r\n\r\n2. Enable Two-Factor Authentication (2FA): 2FA adds an extra layer of security to your accounts by requiring a second form of verification before you can access them. This could be a code sent via text message, email, or generated through an authentication app.\r\n\r\n3. Use Password Managers: A password manager securely stores all your login information and generates strong passwords for you. It also allows you to easily manage multiple accounts with one master password.\r\n\r\n4. Avoid Public Wi-Fi Networks: Public Wi-Fi networks are often not secure, which makes them vulnerable to hacking attempts. If possible, avoid using public Wi-Fi networks when accessing sensitive information or conducting online transactions.\r\n\r\n5. Keep Your Software Up-to-Date: Always keep your operating system and software up-to-date with the latest security patches and updates. This helps protect against known vulnerabilities that hackers could exploit.\r\n\r\n6. Use a Virtual Private Network (VPN): A VPN encrypts all your internet traffic, making it difficult for hackers to intercept or steal your data. It also hides your IP address, which can help prevent identity theft and other types of cyber attacks.\r\n\r\n7. Be Cautious with Email Attachments: Always be cautious when opening email attachments from unknown sources. Malicious emails may contain viruses or malware that could harm your computer or steal sensitive information.\r\n\r\n8. Use Antivirus Software: Antivirus software can help protect against malware and other types of cyber threats. It scans your system for known threats and removes them before they can cause any damage.\r\n\r\n9. Avoid Sharing Personal Information Online: Be careful about sharing personal information online, such as you\n\n... [Response truncated for readability]"
  },
  {
    "query": "provide the CVSS String/Vector for SQL-Injection",
    "context": "CVSS:3.x/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\n\n(Explanation: Network access, low complexity, no privileges required, no user interaction, unchanged scope, high confidentiality impact, high integrity impact, high availability impact.)\n"
  },
  {
    "query": "provide the CVSS String/Vector for cross-site scripting",
    "context": "**XSS CVSS Vector Example (Reflected):**\n\n`AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N`\n\n**Explanation:**\n\n*   **AV:N** (Network): Vulnerability exploitable over the network.\n*   **AC:L** (Low): Attack complexity is low.\n*   **PR:N** (None): No privileges required.\n*   **UI:R** (Required): User interaction required.\n*   **S:C** (Changed): Scope is changed, affects other components.\n*   **C:L** (Low): Limited confidentiality impact.\n*   **I:L** (Low): Limited integrity impact.\n*   **A:N** (None): No availability impact.\n\nThe vector will vary depending on XSS type (stored, DOM) and impact.\n"
  }
]